"use client";

import { useState, useEffect, useCallback } from "react";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { RotateCcw, Settings, ChevronRight } from "lucide-react";
import {
  algorithms,
  getAlgorithmById,
} from "@/components/search/algorithms/algorithms";
import type { SearchStep } from "./search";
import type { Graph } from "./search";

// Graph data structures
export const graphs: Record<string, Graph> = {
  tree: {
    name: "Problem 1: Breadth-First?",
    nodes: [
      { id: "S", x: 50, y: 150 },
      { id: "A", x: 50, y: 50 },
      { id: "B", x: 125, y: 50 },
      { id: "C", x: 200, y: 50 },
      { id: "D", x: 275, y: 50 },
      { id: "E", x: 165, y: 150 },
      { id: "F", x: 275, y: 150 },
      { id: "H", x: 275, y: 250 },
      { id: "I", x: 350, y: 250 },
      { id: "J", x: 425, y: 250 },
      { id: "K", x: 500, y: 250 },
      { id: "L", x: 390, y: 150 },
      { id: "G", x: 500, y: 150 },
    ],
    edges: [
      { from: "S", to: "A" },
      { from: "A", to: "B" },
      { from: "B", to: "C" },
      { from: "C", to: "D" },
      { from: "S", to: "E" },
      { from: "E", to: "F" },
      { from: "D", to: "F" },
      { from: "F", to: "H" },
      { from: "H", to: "I" },
      { from: "I", to: "J" },
      { from: "J", to: "K" },
      { from: "K", to: "G" },
      { from: "F", to: "L" },
      { from: "L", to: "G" },
    ],
    heuristics: {
      S: 18,
      A: 15,
      B: 12,
      C: 9,
      D: 5,
      E: 5,
      F: 3,
      G: 0,
      H: 4,
      I: 3,
      J: 2,
      K: 1,
      L: 1,
    },
    costs: [
      { from: "S", to: "A", cost: 9 },
      { from: "A", to: "B", cost: 3 },
      { from: "B", to: "C", cost: 4 },
      { from: "C", to: "D", cost: 6 },
      { from: "S", to: "E", cost: 5 },
      { from: "E", to: "F", cost: 2 },
      { from: "D", to: "F", cost: 1 },
      { from: "F", to: "H", cost: 3 },
      { from: "H", to: "I", cost: 3 },
      { from: "I", to: "J", cost: 1 },
      { from: "J", to: "K", cost: 3 },
      { from: "K", to: "G", cost: 2 },
      { from: "F", to: "L", cost: 1 },
      { from: "L", to: "G", cost: 1 },
    ],
  },
  network: {
    name: "Session 2: ex. 1.1",
    nodes: [
      { id: "S", x: 25, y: 150 },
      { id: "A", x: 150, y: 50 },
      { id: "B", x: 150, y: 150 },
      { id: "C", x: 150, y: 250 },
      { id: "E", x: 250, y: 100 },
      { id: "D", x: 250, y: 200 },
      { id: "F", x: 350, y: 150 },
      { id: "G", x: 450, y: 150 },
    ],
    edges: [
      { from: "S", to: "A" },
      { from: "S", to: "B" },
      { from: "S", to: "C" },
      { from: "A", to: "E" },
      { from: "B", to: "E" },
      { from: "B", to: "D" },
      { from: "C", to: "D" },
      { from: "E", to: "F" },
      { from: "D", to: "F" },
      { from: "F", to: "G" },
    ],
    heuristics: { S: 17, A: 10, B: 13, C: 4, D: 2, E: 4, F: 1, G: 0 },
    costs: [
      { from: "S", to: "A", cost: 6 },
      { from: "S", to: "B", cost: 5 },
      { from: "S", to: "C", cost: 10 },
      { from: "A", to: "E", cost: 6 },
      { from: "B", to: "E", cost: 6 },
      { from: "B", to: "D", cost: 7 },
      { from: "C", to: "D", cost: 6 },
      { from: "E", to: "F", cost: 4 },
      { from: "D", to: "F", cost: 6 },
      { from: "F", to: "G", cost: 3 },
    ],
  },
  ex2: {
    name: "Session 2: ex. 1.2",
    nodes: [
      { id: "S", x: 200, y: 50 },
      { id: "C", x: 50, y: 50 },
      { id: "A", x: 350, y: 50 },
      { id: "D", x: 350, y: 200 },
      { id: "B", x: 200, y: 200 },
      { id: "G", x: 50, y: 200 },
    ],
    edges: [
      { from: "S", to: "A" },
      { from: "S", to: "B" },
      { from: "S", to: "C" },
      { from: "A", to: "D" },
      { from: "D", to: "B" },
      { from: "B", to: "G" },
      { from: "C", to: "G" },
    ],
    heuristics: { S: 0, A: 0, B: 4, C: 3, D: 0, G: 0 },
    costs: [
      { from: "S", to: "A", cost: 10 },
      { from: "S", to: "B", cost: 8 },
      { from: "S", to: "C", cost: 9 },
      { from: "A", to: "D", cost: 1 },
      { from: "D", to: "B", cost: 4 },
      { from: "B", to: "G", cost: 5 },
      { from: "C", to: "G", cost: 5 },
    ],
  },
  exa: {
    name: "First example on A* Search",
    nodes: [
      { id: "S", x: 150, y: 100 },
      { id: "A", x: 50, y: 200 },
      { id: "B", x: 250, y: 200 },
      { id: "C", x: 350, y: 100 },
      { id: "G", x: 450, y: 200 },
    ],
    edges: [
      { from: "S", to: "A" },
      { from: "S", to: "B" },
      { from: "A", to: "B" },
      { from: "B", to: "G" },
      { from: "C", to: "G" },
      { from: "C", to: "B" },
    ],
    heuristics: { S: 7, A: 10, B: 9, C: 5, G: 0 },
    costs: [
      { from: "S", to: "A", cost: 1 },
      { from: "S", to: "B", cost: 1 },
      { from: "A", to: "B", cost: 9 },
      { from: "B", to: "G", cost: 12 },
      { from: "C", to: "G", cost: 5 },
      { from: "C", to: "B", cost: 6 },
    ],
  },
  ex31: {
    name: "Exercise path finding",
    nodes: [
      // Alle geldige vakjes behalve obstakels (zwart)
      { id: "0_0", x: 0, y: 0 },
      { id: "1_0", x: 50, y: 0 },
      { id: "2_0", x: 100, y: 0 },
      { id: "3_0", x: 150, y: 0 },
      { id: "4_0", x: 200, y: 0 },
      { id: "5_0", x: 250, y: 0 },
      { id: "6_0", x: 300, y: 0 },
      { id: "7_0", x: 350, y: 0 },
      { id: "0_1", x: 0, y: 50 },
      { id: "1_1", x: 50, y: 50 },
      { id: "2_1", x: 100, y: 50 },
      { id: "3_1", x: 150, y: 50 },
      { id: "4_1", x: 200, y: 50 },
      { id: "5_1", x: 250, y: 50 },
      { id: "6_1", x: 300, y: 50 },
      { id: "7_1", x: 350, y: 50 },
      { id: "0_2", x: 0, y: 100 },
      { id: "1_2", x: 50, y: 100 },
      { id: "2_2", x: 100, y: 100 },
      { id: "3_2", x: 150, y: 100 },
      { id: "4_2", x: 200, y: 100 },
      { id: "5_2", x: 250, y: 100 },
      { id: "6_2", x: 300, y: 100 },
      { id: "7_2", x: 350, y: 100 },
      { id: "0_3", x: 0, y: 150 },
      { id: "1_3", x: 50, y: 150 },
      { id: "7_3", x: 350, y: 150 },
      { id: "0_4", x: 0, y: 200 },
      { id: "2_4", x: 100, y: 200 },
      { id: "3_4", x: 150, y: 200 },
      { id: "4_4", x: 200, y: 200 },
      { id: "5_4", x: 250, y: 200 },
      { id: "6_4", x: 300, y: 200 },
      { id: "7_4", x: 350, y: 200 },
      { id: "0_5", x: 0, y: 250 },
      { id: "1_5", x: 50, y: 250 },
      { id: "3_5", x: 150, y: 250 },
      { id: "4_5", x: 200, y: 250 },
      { id: "5_5", x: 250, y: 250 },
      { id: "7_5", x: 350, y: 250 },
      { id: "0_6", x: 0, y: 300 },
      { id: "1_6", x: 50, y: 300 },
      { id: "2_6", x: 100, y: 300 },
      { id: "3_6", x: 150, y: 300 },
      { id: "4_6", x: 200, y: 300 },
      { id: "5_6", x: 250, y: 300 },
      { id: "6_6", x: 300, y: 300 },
      { id: "7_6", x: 350, y: 300 },
      { id: "0_7", x: 0, y: 350 },
      { id: "1_7", x: 50, y: 350 },
      { id: "2_7", x: 100, y: 350 },
      { id: "3_7", x: 150, y: 350 },
      { id: "4_7", x: 200, y: 350 },
      { id: "5_7", x: 250, y: 350 },
      { id: "6_7", x: 300, y: 350 },
      { id: "7_7", x: 350, y: 350 },
    ],
    edges: [
      ...(() => {
        const edges = [];
        const nodeSet = new Set([
          "0_0",
          "1_0",
          "2_0",
          "3_0",
          "4_0",
          "5_0",
          "6_0",
          "7_0",
          "0_1",
          "1_1",
          "2_1",
          "3_1",
          "4_1",
          "5_1",
          "6_1",
          "7_1",
          "0_2",
          "1_2",
          "2_2",
          "3_2",
          "4_2",
          "5_2",
          "6_2",
          "7_2",
          "0_3",
          "1_3",
          "7_3",
          "0_4",
          "2_4",
          "3_4",
          "4_4",
          "5_4",
          "6_4",
          "7_4",
          "0_5",
          "1_5",
          "3_5",
          "4_5",
          "5_5",
          "7_5",
          "0_6",
          "1_6",
          "2_6",
          "3_6",
          "4_6",
          "5_6",
          "6_6",
          "7_6",
          "0_7",
          "1_7",
          "2_7",
          "3_7",
          "4_7",
          "5_7",
          "6_7",
          "7_7",
        ]);
        for (let y = 0; y <= 6; y++) {
          for (let x = 0; x <= 9; x++) {
            const id = `${x}_${y}`;
            if (!nodeSet.has(id)) continue;
            const right = `${x + 1}_${y}`;
            const down = `${x}_${y + 1}`;
            if (nodeSet.has(right)) edges.push({ from: id, to: right });
            if (nodeSet.has(down)) edges.push({ from: id, to: down });
          }
        }
        return edges;
      })(),
    ],
    heuristics: {
      "0_0": 4,
      "1_0": 3,
      "2_0": 2,
      "3_0": 3,
      "4_0": 4,
      "5_0": 5,
      "6_0": 6,
      "7_0": 7,
      "0_1": 3,
      "1_1": 2,
      "2_1": 1,
      "3_1": 2,
      "4_1": 3,
      "5_1": 4,
      "6_1": 5,
      "7_1": 6,
      "0_2": 2,
      "1_2": 1,
      "2_2": 0,
      "3_2": 1,
      "4_2": 2,
      "5_2": 3,
      "6_2": 4,
      "7_2": 5,
      "0_3": 3,
      "1_3": 2,
      "7_3": 6,
      "0_4": 4,
      "2_4": 2,
      "3_4": 3,
      "4_4": 4,
      "5_4": 5,
      "6_4": 6,
      "7_4": 7,
      "0_5": 5,
      "1_5": 4,
      "3_5": 4,
      "4_5": 5,
      "5_5": 6,
      "7_5": 8,
      "0_6": 6,
      "1_6": 5,
      "2_6": 4,
      "3_6": 5,
      "4_6": 6,
      "5_6": 7,
      "6_6": 8,
      "7_6": 9,
      "0_7": 7,
      "1_7": 6,
      "2_7": 5,
      "3_7": 6,
      "4_7": 7,
      "5_7": 8,
      "6_7": 9,
      "7_7": 10,
    },
  },
};

// Default start/goal nodes for each graph
export const defaultNodes: Record<string, { start: string; goal: string }> = {
  tree: { start: "S", goal: "G" },
  network: { start: "S", goal: "G" },
  ex2: { start: "S", goal: "G" },
  exa: { start: "S", goal: "G" },
  ex31: { start: "3_5", goal: "2_2" },
};
